{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "quadricula",
						"type": "DatasetReference"
					},
					"name": "quadricula"
				},
				{
					"dataset": {
						"referenceName": "RequestLocation",
						"type": "DatasetReference"
					},
					"name": "requestLocation"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "join6"
				}
			],
			"scriptLines": [
				"parameters{",
				"     par as string",
				"}",
				"source(output(",
				"          BaseLocationsID as integer,",
				"          QuadriculaID as string,",
				"          Lat as string,",
				"          Lng as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> quadricula",
				"source(output(",
				"          RequestLocationID as integer,",
				"          QuadriculaID as string,",
				"          LocationID as integer,",
				"          Lat as string,",
				"          Lng as string,",
				"          Create as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> requestLocation",
				"quadricula, requestLocation join(quadricula@QuadriculaID == requestLocation@QuadriculaID,",
				"     joinType:'right',",
				"     broadcast: 'auto')~> join2",
				"quadricula join(quadricula@QuadriculaID == BaseLocation@QuadriculaID,",
				"     joinType:'right',",
				"     broadcast: 'auto')~> join3",
				"requestLocation join(requestLocation@RequestLocationID == ResponseError@RequestLocationID,",
				"     joinType:'right',",
				"     broadcast: 'auto')~> join4",
				"requestLocation join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'right',",
				"     broadcast: 'auto')~> join5",
				"quadricula join(quadricula@BaseLocationsID == LocationID,",
				"     joinType:'right',",
				"     broadcast: 'auto')~> join6",
				"join6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}